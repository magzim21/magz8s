# # https://github.com/grafana/mimir/tree/main/operations/helm/charts/mimir-distributed
# ---
# apiVersion: argoproj.io/v1alpha1
# kind: Application
# metadata:
#   name: mimir-cluster
#   namespace: argocd
#   annotations:
#     argocd.argoproj.io/sync-wave: "1"
# spec:
#   project: monitoring
#   source:
#     chart: mimir-distributed
#     repoURL: https://grafana.github.io/helm-charts
#     targetRevision: 2.1.0
#     helm:
#       releaseName: mimir-cluster
#       valueFiles:
#         - small.yaml
#       # - values/grafana-mimir-custom.yaml
#       # - values/grafana-mimir-small-cluster.yaml
#       # - https://github.com/magzim21/magz8s/blob/main/argo-projects/monitoring/values/grafana-mimir-custom.yaml
#       # - https://github.com/magzim21/magz8s/blob/main/argo-projects/monitoring/values/grafana-mimir-small-cluster.yaml
#       parameters:
#         # todo de-hardcode
#         - name: "serviceAccount.name"
#           value: "mimir-cluster-minio"
#         - name: 'serviceAccount.annotations.eks\.amazonaws\.com/role-arn'
#           value: "arn:aws:iam::249446252531:role/mimir-cluster-minio"
#         - name: "minio.enabled"
#           value: "false"
#           # setting other endpoints and bucketnames
#         - name: "mimir.config"
#           value: |
#             activity_tracker:
#               filepath: /data/metrics-activity.log

#             {{- if .Values.enterprise.enabled }}
#             admin_api:
#               leader_election:
#                 enabled: true
#                 ring:
#                   kvstore:
#                     store: "memberlist"

#               {{- if .Values.minio.enabled }}
#             admin_client:
#               storage:
#                 type: s3
#                 s3:
#                   access_key_id: {{ .Values.minio.accessKey }}
#                   bucket_name: magz8s-stage-metrics-admin
#                   endpoint: s3.ca-central-1.amazonaws.com
#                   insecure: true
#                   secret_access_key: {{ .Values.minio.secretKey }}
#               {{- end }}
#             {{- end }}

#             alertmanager:
#               data_dir: /data
#               enable_api: true
#               external_url: /alertmanager

#             {{- if .Values.minio.enabled }}
#             alertmanager_storage:
#               backend: s3
#               s3:
#                 access_key_id: {{ .Values.minio.accessKey }}
#                 bucket_name: magz8s-stage-metrics-ruler
#                 endpoint: s3.ca-central-1.amazonaws.com
#                 insecure: true
#                 secret_access_key: {{ .Values.minio.secretKey }}
#             {{- end }}

#             {{- if .Values.enterprise.enabled }}
#             auth:
#               type: enterprise
#             {{- end }}

#             # This configures how the store-gateway synchronizes blocks stored in the bucket. It uses Minio by default for getting started (configured via flags) but this should be changed for production deployments.
#             blocks_storage:
#               backend: s3
#               bucket_store:
#                 {{- if index .Values "chunks-cache" "enabled" }}
#                 chunks_cache:
#                   backend: memcached
#                   memcached:
#                     addresses: {{ include "mimir.chunksCacheAddress" . }}
#                     max_item_size: {{ mul (index .Values "chunks-cache").maxItemMemory 1024 1024 }}
#                     timeout: 450ms
#                 {{- end }}
#                 {{- if index .Values "index-cache" "enabled" }}
#                 index_cache:
#                   backend: memcached
#                   memcached:
#                     addresses: {{ include "mimir.indexCacheAddress" . }}
#                     max_item_size: {{ mul (index .Values "index-cache").maxItemMemory 1024 1024 }}
#                 {{- end }}
#                 {{- if index .Values "metadata-cache" "enabled" }}
#                 metadata_cache:
#                   backend: memcached
#                   memcached:
#                     addresses: {{ include "mimir.metadataCacheAddress" . }}
#                     max_item_size: {{ mul (index .Values "metadata-cache").maxItemMemory 1024 1024 }}
#                 {{- end }}
#                 sync_dir: /data/tsdb-sync
#               {{- if .Values.minio.enabled }}
#               s3:
#                 access_key_id: {{ .Values.minio.accessKey }}
#                 bucket_name: magz8s-stage-metrics-tsdb
#                 endpoint: s3.ca-central-1.amazonaws.com
#                 insecure: true
#                 secret_access_key: {{ .Values.minio.secretKey }}
#               {{- end }}
#               tsdb:
#                 dir: /data/tsdb

#             {{- if .Values.enterprise.enabled }}
#             cluster_name: "{{ .Release.Name }}"
#             {{- end }}

#             compactor:
#               data_dir: "/data"

#             frontend:
#               align_queries_with_step: true
#               log_queries_longer_than: 10s
#               {{- if index .Values "results-cache" "enabled" }}
#               results_cache:
#                 backend: memcached
#                 memcached:
#                   addresses: {{ include "mimir.resultsCacheAddress" . }}
#                   max_item_size: {{ mul (index .Values "results-cache").maxItemMemory 1024 1024 }}
#               cache_results: true
#               {{- end }}

#             frontend_worker:
#               frontend_address: {{ template "mimir.fullname" . }}-query-frontend-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverGrpcListenPort" . }}

#             {{- if and .Values.enterprise.enabled .Values.gateway.useDefaultProxyURLs }}
#             gateway:
#               proxy:
#                 admin_api:
#                   url: http://{{ template "mimir.fullname" . }}-admin-api.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
#                 alertmanager:
#                   url: http://{{ template "mimir.fullname" . }}-alertmanager.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
#                 compactor:
#                   url: http://{{ template "mimir.fullname" . }}-compactor.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
#                 default:
#                   url: http://{{ template "mimir.fullname" . }}-admin-api.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
#                 distributor:
#                   url: dns:///{{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ include "mimir.serverGrpcListenPort" . }}
#                 ingester:
#                   url: http://{{ template "mimir.fullname" . }}-ingester.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
#                 query_frontend:
#                   url: http://{{ template "mimir.fullname" . }}-query-frontend.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
#                 ruler:
#                   url: http://{{ template "mimir.fullname" . }}-ruler.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
#                 store_gateway:
#                   url: http://{{ template "mimir.fullname" . }}-store-gateway.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
#             {{- end }}

#             ingester:
#               ring:
#                 final_sleep: 0s
#                 num_tokens: 512
#                 unregister_on_shutdown: false

#             ingester_client:
#               grpc_client_config:
#                 max_recv_msg_size: 104857600
#                 max_send_msg_size: 104857600

#             {{- if .Values.enterprise.enabled }}
#             instrumentation:
#               enabled: true
#               distributor_client:
#                 address: dns:///{{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ include "mimir.serverGrpcListenPort" . }}

#             license:
#               path: "/license/license.jwt"
#             {{- end }}

#             limits: {}

#             memberlist:
#               abort_if_cluster_join_fails: false
#               compression_enabled: false
#               join_members:
#               - {{ include "mimir.fullname" . }}-gossip-ring

#             ruler:
#               alertmanager_url: dnssrvnoa+http://_http-metrics._tcp.{{ template "mimir.fullname" . }}-alertmanager-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}/alertmanager
#               enable_api: true
#               rule_path: /data

#             {{- if .Values.minio.enabled }}
#             ruler_storage:
#               backend: s3
#               s3:
#                 endpoint: s3.ca-central-1.amazonaws.com
#                 bucket_name: magz8s-stage-metrics-ruler
#                 access_key_id: {{ .Values.minio.accessKey }}
#                 secret_access_key: {{ .Values.minio.secretKey }}
#                 insecure: true
#             {{- end }}

#             runtime_config:
#               file: /var/{{ include "mimir.name" . }}/runtime.yaml

#             server:
#               grpc_server_max_concurrent_streams: 1000
#   destination:
#     server: https://kubernetes.default.svc
#     namespace: mimir-cluster
#   syncPolicy:
#     automated:
#       # not default.
#       # prune: false
#       # not default
#       allowEmpty: true
#       # not default. enable automatic sync when the live cluster's state deviates from the state defined in Git. Default interval 5 secs.
#       selfHeal: true
#     syncOptions:
#       # - ApplyOutOfSyncOnly=true
#       - CreateNamespace=true
